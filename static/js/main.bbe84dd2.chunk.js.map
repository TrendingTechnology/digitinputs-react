{"version":3,"sources":["../../src/components/DigitInputs/DigitInputs.js","../../src/components/Digit/Digit.js","App.js","index.js"],"names":["DigitInputs","onDigitsChange","hidden","children","useState","values","setValues","focusedIndex","setFocusedIndex","useEffect","asString","Object","asNumber","Number","asObject","handleDigitChange","index","value","test","digits","cloneElement","digit","focused","onDigitChange","className","Digit","digitRef","useRef","styles","name","type","autoComplete","ref","maxLength","onChange","event","onKeyPress","App","valueAsString","setValueAsString","valueAsNumber","setValueAsNumber","valueAsObject","setValueAsObject","setHidden","htmlFor","checked","target","JSON","stringify","ReactDOM","render","document","getElementById"],"mappings":"8dAEO,SAASA,EAAY,GAAsC,IAApCC,EAAoC,EAApCA,eAAgBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SAAY,EACpCC,mBADoC,IACzDC,EADyD,KACjDC,EADiD,OAExBF,mBAFwB,IAEzDG,EAFyD,KAE3CC,EAF2C,KAIhEC,qBAAU,WACR,KAAoB,CAClB,IAAMC,EAAWC,sBAAjB,IACMC,EAAWC,OAAjB,GACAZ,EAAe,CACbW,SADa,EAEbF,SAFa,EAGbI,SAAUT,OAGb,CAVHI,IAYA,IAAMM,EAAoB,SAACC,EAAOC,GAChCX,GAAU,0DAKVE,EAAgB,QAAQU,KAAKD,GAASD,EAAtB,EAAhBR,OAGIW,EAAS,kBAAuB,qBACpCC,uBAAaC,EAAO,CAClBL,MADkB,EAElBC,MAAOZ,MAFW,KAGlBiB,QAASN,IAHS,EAIlBd,OAAQA,IAJU,EAKlBqB,cAAeR,OAInB,OAAO,yBAAKS,UAAU,gBAAtB,G,eClCK,SAASC,EAAM,GAAkD,IAAhDT,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,MAAOM,EAAkC,EAAlCA,cAAeD,EAAmB,EAAnBA,QAASpB,EAAU,EAAVA,OACtDwB,EAAWC,iBAAjB,MAEAlB,qBAAU,WACRa,GAAWI,UAAXJ,WAaF,OACE,2BACEE,UAAWI,EACXC,KAAI,eAFN,EAGEC,KAAM5B,EAAS,WAHjB,OAIE6B,aAJF,MAKEd,MAAOA,GALT,GAMEe,IANF,EAOEC,UAPF,EAQEC,SAnBiB,SAACC,GACpBZ,EAAcP,EAAOmB,SAArBZ,QAmBEa,WAhBkB,SAACD,GAChB,QAAQjB,KAAKiB,EAAlB,MACEA,sB,UCiCSE,EA5CH,WAAO,IAAD,EAC0BjC,mBAAS,IADnC,mBACTkC,EADS,KACMC,EADN,OAE0BnC,mBAAS,MAFnC,mBAEToC,EAFS,KAEMC,EAFN,OAG0BrC,mBAAS,IAHnC,mBAGTsC,EAHS,KAGMC,EAHN,OAIYvC,oBAAS,GAJrB,mBAITF,EAJS,KAID0C,EAJC,KAgBhB,OACE,yBAAKpB,UAAU,eACb,0BAAMO,aAAa,gBACjB,yBAAKP,UAAU,eACb,wDACA,kBAACxB,EAAD,CAAaE,OAAQA,EAAQD,eAfL,SAACgB,GAC/B0B,EAAiB1B,EAAMH,UACvByB,EAAiBtB,EAAMP,UACvB+B,EAAiBxB,EAAML,YAaf,kBAACa,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,QAGJ,yBAAKD,UAAU,eACb,2BAAOqB,QAAQ,YAAf,OAEE,2BAAOf,KAAK,WAAWD,KAAK,WAAWiB,QAAS5C,EAAQgC,SArBxC,SAACC,GACzBS,EAAUT,EAAMY,OAAOD,eAwBrB,+CAAqBR,GACrB,+CAAqBE,GACrB,+CAAqBQ,KAAKC,UAAUP,MCtC1CQ,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.bbe84dd2.chunk.js","sourcesContent":["import React, { useState, useEffect, Children, cloneElement } from 'react'\r\n\r\nexport function DigitInputs({ onDigitsChange, hidden, children }) {\r\n  const [values, setValues] = useState({})\r\n  const [focusedIndex, setFocusedIndex] = useState({})\r\n\r\n  useEffect(() => {\r\n    if (onDigitsChange) {\r\n      const asString = Object.values(values).join('')\r\n      const asNumber = Number(asString)\r\n      onDigitsChange({\r\n        asNumber,\r\n        asString,\r\n        asObject: values\r\n      })\r\n    }\r\n  }, [values])\r\n\r\n  const handleDigitChange = (index, value) => {\r\n    setValues((prevState) => ({\r\n      ...prevState,\r\n      [index]: value\r\n    }))\r\n\r\n    setFocusedIndex(/[0-9]/.test(value) ? index + 1 : null)\r\n  }\r\n\r\n  const digits = Children.map(children, (digit, index) =>\r\n    cloneElement(digit, {\r\n      index: index,\r\n      value: values[index] || null,\r\n      focused: index === focusedIndex,\r\n      hidden: hidden || false,\r\n      onDigitChange: handleDigitChange\r\n    })\r\n  )\r\n\r\n  return <div className='digit-inputs'>{digits}</div>\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport styles from './Digit.module.css'\r\n\r\nexport function Digit({ index, value, onDigitChange, focused, hidden }) {\r\n  const digitRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    focused && digitRef.current.focus()\r\n  })\r\n\r\n  const handleChange = (event) => {\r\n    onDigitChange(index, event.target.value)\r\n  }\r\n\r\n  const validateDigit = (event) => {\r\n    if (!/[0-9]/.test(event.key)) {\r\n      event.preventDefault()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <input\r\n      className={styles.digit}\r\n      name={`digit-index-${index}`}\r\n      type={hidden ? 'password' : 'text'}\r\n      autoComplete='off'\r\n      value={value || ''}\r\n      ref={digitRef}\r\n      maxLength={1}\r\n      onChange={handleChange}\r\n      onKeyPress={validateDigit}\r\n    />\r\n  )\r\n}\r\n","import React, { useState }  from 'react'\n\nimport { DigitInputs, Digit } from 'digitinputs-react'\nimport 'digitinputs-react/dist/index.css'\n\nconst App = () => {\n  const [valueAsString, setValueAsString] = useState('')\n  const [valueAsNumber, setValueAsNumber] = useState(null)\n  const [valueAsObject, setValueAsObject] = useState({})\n  const [hidden, setHidden] = useState(false)\n\n  const handleDigitInputsChange = (value) => {\n    setValueAsObject(value.asObject)\n    setValueAsString(value.asString)\n    setValueAsNumber(value.asNumber)\n  }\n\n  const handleCheckChange = (event) => {\n    setHidden(event.target.checked)\n  }\n\n  return (\n    <div className=\"example-app\">\n      <form autoComplete=\"new-password\">\n        <div className=\"input-field\">\n          <label>Please enter the code</label>\n          <DigitInputs hidden={hidden} onDigitsChange={handleDigitInputsChange}>\n            <Digit />\n            <Digit />\n            <Digit />\n            <Digit />\n            <Digit />\n            <Digit />\n          </DigitInputs>\n        </div>\n        <div className=\"input-field\">\n          <label htmlFor=\"isHidden\">\n            Hide\n            <input type=\"checkbox\" name=\"isHidden\" checked={hidden} onChange={handleCheckChange} />\n          </label>\n        </div>\n      </form>\n      <p>Value as string: {valueAsString}</p>\n      <p>Value as number: {valueAsNumber}</p>\n      <p>value as Object: {JSON.stringify(valueAsObject)}</p>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}